<link href="https://fonts.googleapis.com/css?family=PT+Serif:400,400i,700,700i|Source+Sans+Pro:400,400i,600,600i" rel="stylesheet">

Basic Grid
<img src="images/wing.jpg" alt="The sun sets behind the wing of an airliner.">

Full Bleed CSS Grid
CSS Grid provides a trivial solution to a complex problem: How to display full-bleed content mixed with center-aligned width-constrained content. This solution ellimiates the need for auto-margins and floats while allowing the developer to change the grid globally and see those changes apply to each element individually.


<img src="images/nerve.jpg" alt="The leaves of a Nerve Plant.">
Grid is great
CSS Grid is a two-dimensional layout tool. It is great for laying out content in a grid, and for laying out content in two dimensions.

<img src="images/tree.jpg" alt="A solitary tree in a field.">
Flex is great too
That said, Grid is not always the right option for layouts. If for example you need to lay out a series of identical boxes like those you see here, Flex may be a better option.

Subgrid would be nice here
The solution provided here is limited by the lack of support for subgrids. If subgrids were available, the solution would be more refined. In lieu of subgrid, the solution applies a grid to each full-bleed section within the layout using a common class <code>.grid</code> and creates the full-bleed/centered effect that way.

Grid lets you do unusual things
Creating this layout, where two items share the total available viewport width evenly alongside full-width and centered content, is suprisingly complex if you don't have CSS Grid available.

Grid requires a rethink
Seeing this layout you may still think it's better to just use old methods with auto-margins and max-widths. And you <em>can</em>, but looking at the CSS you'll see the Grid approach is both cleaner and easier to understand.



